train <- segmentationOriginal[unlist(inTrain),]
test <- segmentationOriginal[-unlist(inTrain),]
model <- train(Case ~ . , data = train, method="rpart")
model
predict(model, c(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2))
predict(model, c(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2))
df <- c(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
df <- c(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
df
df[1,]
rbind(df, c(TotalIntench2 = 50,000, FiberWidthCh1 = 10, VarIntenCh4 = 100))
df
df <- rbind(df, c(TotalIntench2 = 50,000, FiberWidthCh1 = 10, VarIntenCh4 = 100))
df
str(df)
names(df)
colnames(df)
df <- rbind(df, c(TotalIntench2 = 57,000, FiberWidthCh1 = 8,VarIntenCh4 = 100))
df <- rbind(df, c(FiberWidthCh1 = 8,VarIntenCh4 = 100;?, PerimStatusCh1=2))
df <- rbind(df, c(FiberWidthCh1 = 8,VarIntenCh4 = 100, PerimStatusCh1=2))
predict(model, newdata=FiberWidthCh1 = 8)
predict(model, newdata=c(FiberWidthCh1 = 8)
predict(model, newdata=c(FiberWidthCh1 = 8))
df <- data.frame(TotalIntench2 = c(23000, 50000, 57000), FiberWidthCh1=c(10,10,8,8) )
df <- data.frame(TotalIntench2 = c(23000, 50000, 57000, NA), FiberWidthCh1=c(10,10,8,8) )
df
df <- data.frame(TotalIntench2 = c(23000, 50000, 57000, NA), FiberWidthCh1=c(10,10,8,8), PerimStatusCh1=c(2,NA,NA,2), VarIntenCh4 = c(NA, 100, 100, 2)
df <- data.frame(TotalIntench2 = c(23000, 50000, 57000, NA), FiberWidthCh1=c(10,10,8,8), PerimStatusCh1=c(2,NA,NA,2), VarIntenCh4 = c(NA, 100, 100, 2))
df
predict(model, newdata=df)
dim(train)
df <- data.frame(TotalIntenCh2 = c(23000, 50000, 57000, NA), FiberWidthCh1=c(10,10,8,8), PerimStatusCh1=c(2,NA,NA,2), VarIntenCh4 = c(NA, 100, 100, 2))
predict(model, newdata=df)
train$TotalIntenCh2
predict(model, newdata=df)
df <- data.frame(TotalIntenCh2 = c(23000, 50000, 57000, NA), FiberWidthCh1=c(10,10,8,8), PerimStatusCh1=c(2,NA,NA,2), VarIntenCh4 = c(NA, 100, 100, 2))
train$FiberWidthCh1
df <- data.frame(TotalIntenCh2 = c(23000, 50000, 57000, NA), FiberWidthCh1=c(10,10,8,8), PerimStatusCh1=c(2,NA,NA,2), VarIntenCh4 = c(NA, 100, 100, 2))
train$PerimStatusCh1
df <- data.frame(TotalIntenCh2 = c(23000, 50000, 57000, NA), FiberWidthCh1=c(10,10,8,8), PerimStatusCh1=c(2,NA,NA,2), VarIntenCh4 = c(NA, 100, 100, 2))
train$VarIntenCh4
df$VarIntenCh4
df$PerimStatusCh1
predict(model, newdata=df)
predict(model,data.frame(23,000))
predict(model,data.frame(FiberWidthCh1=10))
predict(model,newdata=data.frame(FiberWidthCh1=10))
df <- data.frame(TotalIntenCh2 23000, FiberWidthCh1=10, PerimStatusCh1=2)
df <- data.frame(TotalIntenCh2=23000, FiberWidthCh1=10, PerimStatusCh1=2)
df
predict(model,newdata=df)
model
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(3433)
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case)
train <- segmentationOriginal[unlist(inTrain),]
train <- segmentationOriginal[-unlist(inTrain),]
train <- segmentationOriginal[unlist(inTrain),]
test <- segmentationOriginal[-unlist(inTrain),]
model <- train(Case ~ ., method=rpart, data=train)
model <- train(Case ~ ., method="rpart", data=train)
newdata <- df(c(TotalIntenCh2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2))
newdata <- df(c(TotalIntenCh2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2))
newdata <- data.frame(c(TotalIntenCh2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2))
newdata
newdata <- data.frame(TotalIntenCh2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
newdata
predict(model, newdata=newdata)
train$TotalIntenCh2
train$FiberWidthCh1
train$PerimStatusCh1
model$coefnames
predict(model)
names(newdata)
names(newdata) <- model$coefnames
newdata <- data.frame(matrix(4,118))
?matrix
newdata <- data.frame(matrix(nrow=4,ncol=118))
names(newdata) <- model$coefnames
newdata[1,"TotalIntenCh2"] <- 23000
newdata[1,]
predict(model,newdata)
?predict
newdata <- data.frame(TotalIntenCh2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(model,newdata)
Cell
model <- train(Class ~ ., method="rpart", data=train)
predict(model,newdata)
newdata <- data.frame(matrix(nrow=4,ncol=118))
newdata[1,"TotalIntenCh2"] <- 23000
predict(model,newdata)
model$coefnames
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
model <- (Area ~ ., method="tree", data=olive)
model <- train(Area ~ ., method="tree", data=olive)
model <- train(Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata)
newdata$Area
olive$Area
model$coefnames
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tabaco + type-A + ldl, data = SAheart)
names(SAheart)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = SAheart)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", data = SAheart)
model
model$coefnames
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", data = trainSA)
missClass(train, model)
missClass(trainSA, model)
missClass(predict(model(trainSA))
missClass(predict(model(trainSA)))
?missClass
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
model <- train(y ~ ., method="rpart", data = vowel.train)
model <- randomForest(y ~ ., data = vowel.train)
model
varImp(model)
?varImp
varImp(model)
model <- randomForest(y ~ ., data = vowel.train, importance=T)
varImp(model)
orderm(varImp(model))
order(varImp(model))
set.seed(33833)
model <- randomForest(y ~ ., data = vowel.train, importance=T)
order(varImp(model))
model <- randomForest(y ~ ., data = vowel.train, importance=Gini)
model <- randomForest(y ~ ., data = vowel.train, importance="Gini")
set.seed(33833)
model <- randomForest(y ~ ., data = vowel.train, importance=TRUE)
varImp(model)
order(varImp(model))
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case)
set.seed(125)
train <- segmentationOriginal[unlist(inTrain),]
test <- segmentationOriginal[-unlist(inTrain),]
train$Class
model <- train(Class ~ ., method="rpart", data=train)
model
newdata <- data.frame(TotalIntenCh2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(model, newdata=newdata)
predict(model, newdata=newdata, ...)
predict(model, newdata=newdata, )
predict(model, newdata$TotalIntenCh2= 23000)
predict(model, 2300)
predictors(model)
predictors(model$TotalIntenCh2, newdata=2300)
predict(model$TotalIntenCh2, newdata=2300)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", data = trainSA)
model
missClass(train, predict(model, train, type=c("response")))
missClass(train, predict(model, newdata=train, type=c("response")))
missClass(train, predict(model, newdata=test, type=c("response")))
missClass(train, predict(model, newdata=test, type=c("link", response")))
missClass(train, predict(model, newdata=test, type=c("link", response"))))
missClass(train, predict(model, newdata=test, type=c("link", response", "terms)))
missClass(train, predict(model, newdata=test, type=c("link", response", "terms"")))
missClass(train, predict(model, newdata=test, type=c("link", "response", "terms"")))
missClass(train, predict(model, newdata=test, type=c("link", "response", "terms")))
set.seed(33833)
m1 <- train(y ~ ., method="rpart", data=vowel.train)
m2 <- train(y ~ ., method="gbm", data=vowel.train)
m1
?accuracy
m1$accuracey
m1$accuracy
?train
m1 <- train(y ~ ., method="rpart", data=vowel.train, metric=("Accuracy"))
m1
m1
m2
library(shiny)
library(minUI)
library(miniUI)
install.packages(miniUI)
install.packages("miniUI")
install.packages("googleVis")
install.packages("plotly")
install.packages("leaflet")
knitr::opts_chunk$set(echo = TRUE)
traindata <- read.csv("pml-training.csv")
testdata <- read.csv("pml-testing.csv")
inTrain <- createDataPartition(y=traindata$classe, p=0.8)
library(caret)
inTrain <- createDataPartition(y=traindata$classe, p=0.8)
tdata <- traindata[unlist(inTrain),]
vdata <- traindata[-unlist(inTrain),]
m1 <- train(classe ~. , data=na.omit(tdata), method="rpart")
m1$finalModel
# colocar metric=accuracy no train?
pval <- predict(m1, vdata[,-"classe"])
pval <- predict(m1, vdata[,-c("classe")])
pval <- predict(m1, vdata[,-classe])
pval <- predict(m1, vdata[,-vdata$classe])
vdata$classe
pval <- predict(m1, vdata)
pval
confusionMatrix(pval, vdata$classe)
str(vdata)
vdata2 <- vdata[,-"classe"]
vdata2 <- vdata[,-classe]
vdata2 <- vdata[,-c("classe")]
vdata2 <- subset(vdata, -vdata[,"classe"])
vdata2 <- vdata[, -("classe")]
vdata2 <- vdata[, -(classe)]
vdata2 <- vdata[, -c("classe")]
vdata2 <- vdata[, -which("classe")]
vdata2 <- subset(vdata, select = -c(classe))
pval <- predict(m1, vdata2)
pval
?predict
pval <- predict(m1, vdata2, na.action=na.exclude)
pval
pval <- predict(m1, vdata2, na.action=na.exclude)
pval
confusionMatrix(pval, vdata$classe)
vdata$classe
pval <- predict(m1, vdata2, na.action=na.excludade)
pval <- predict(m1, vdata2, na.action="na.exclude")
pval
vdata2 <- complete.cases(vdata)
vdata2
vdata2 <- vdata[complete.cases(vdata),]
vdata3 <- subset(vdata, select = -c(classe))
pval <- predict(m1, vdata3)
confusionMatrix(pval, vdata2$classe)
tval <- predict(m1, testdata)
tval <- predict(m1, testdata)
tdata2 <- subset(testdata, select = -c(classe))
tdata2 <- subset(testdata, select = -c("classe"))
testdata$classe
str(testdata)
str(traindata)
vars <- head(traindata, 1)
head(vars)
vars
head(testdata)
head(testdata,1)
vars <- vars[,-length(colnames(vars))]
testdata2 <- testdata[,-58]
vars <- head(traindata, 1)
vars <- vars[,-length(colnames(vars))]
testdata2 <- testdata[,-58]
testdata3 <- rbind(vars, testdata2)
testdata4 <- testdata3[-1,]
dim(traindata[,58])
str(traindata[,58])
names(traindata[,58])
colnames(traindata[,58])
traindata[1,58]
traindata[1:3,58]
colnames(traindata)
vars <- head(traindata, 1)
vars <- vars[,-length(colnames(vars))]
testdata2 <- rbind(vars, testdata)
vars <- head(traindata, 1)
vars <- vars[,-length(colnames(vars))]
testdata2 <- testdata[,-58]
testdata3 <- rbind(vars, testdata2)
testdata$problem_id
vars$problem_id
traindata$problem_id
which[testdata$problem_id]
colnames(testdata)
vars <- head(traindata, 1)
vars <- vars[,-length(colnames(vars))]
testdata2 <- testdata[,-160]
testdata3 <- rbind(vars, testdata2)
testdata4 <- testdata3[-1,]
testdata <- read.csv("pml-testing.csv")
vars <- head(traindata, 1)
vars <- vars[,-length(colnames(vars))]
testdata2 <- testdata[,-160]
testdata3 <- rbind(vars, testdata2)
testdata4 <- testdata3[-1,]
tval <- predict(m1, testdata4)
tval$finalmodel
tval
testdata4
library("leaflet")
data <- read.csv("C:\\Users\\Vostro 5458\\OneDrive\\Educacao\\Coursera-DataScienceSpecialization\\9-DevelopingDataProducts\\CP1\\MunicipiosBrasil.csv")
data <- read.csv("C:\\Users\\Vostro 5458\\OneDrive\\Educacao\\Coursera-DataScienceSpecialization\\9-DevelopingDataProducts\\CP1\\MunicipiosBrasil.csv", sep=";")
head(data)
class(data$latitude)
data$LATITUDE
data$LATITUDE - 1
data$lat <- as.numeric(data$latitude)
data$LATITUDE
as.numeric(data$LATITUDE)
data <- read.csv2("C:\\Users\\Vostro 5458\\OneDrive\\Educacao\\Coursera-DataScienceSpecialization\\9-DevelopingDataProducts\\CP1\\MunicipiosBrasil.csv" , sep=";")
data
head(data)
data$LATITUDE
str(data$LATITUDE)
leaflet()
addTiles()
map <- leaflet()
map <- addTiles(map)
map
?addMarkers
addMarkers(map, lng= data$LONGTITUDE, lat = data$LATITUDE)
citylocations <- read.csv2("C:\\Users\\Vostro 5458\\OneDrive\\Educacao\\Coursera-DataScienceSpecialization\\9-DevelopingDataProducts\\CP1\\MunicipiosBrasil.csv" , sep=";")
addMarkers(map, lng= citylocations[2,3], lat = data$LATITUDE)
head(citylocations)
addMarkers(map, lng= citylocations[,3], lat = citylocations[,2])
addMarkers(map, lng= citylocations[,3], lat = citylocations[,2], clusterOptions = markerClusterOptions())
addMarkers(map, lng= citylocations[,3], lat = citylocations[,2], clusterOptions = markerClusterOptions(), popup = citylocations[,5])
knitr::opts_chunk$set(echo = TRUE)
setwd("C:\\Users\\Vostro 5458\\OneDrive\\Educacao\\Coursera-DataScienceSpecialization\\8-PracticalMachineLearning\\cp\\Course-Project---Practical-Machine-Learning")
library("caret")
set.seed(100)
traindata <- read.csv("pml-training.csv")
testdata <- read.csv("pml-testing.csv")
sum(is.na(testdata$X))
sum(is.na(testdata))
?sapply
sapply(traindata[,1:160], sum(is.na()),)
sapply(traindata[,1:160], is.na)
table(sapply(traindata[,1:160], is.na))
sum(is.na(traindata[,1]))
sum(is.na(traindata[,2]))
for(i in 1:160){
a[i] <- sum(is.na(traindata[,i]))
}
a <- data.frame()
for(i in 1:160){
a[i] <- sum(is.na(traindata[,i]))
}
?data.frame
?matrix
a <- data.frame(matrix(nrow=160))
for(i in 1:160){
a[i] <- sum(is.na(traindata[,i]))
}
a <- data.frame(matrix(nrow=160))
for(i in 1:160){
a[i] <- sum(is.na(traindata[,i]))
}
a
a <- data.frame(matrix(nrow=160, ncol=1))
for(i in 1:160){
a[i] <- sum(is.na(traindata[,i]))
}
a <- data.frame(matrix(nrow=160, ncol=1))
for(i in 1:160){
a[i] <- sum(is.na(traindata[,i]))
}
a <- data.frame(matrix(nrow=160, ncol=1))
a
a <- data.frame(matrix(nrow=160, ncol=1))
for(i in 1:160){
a[i,1] <- sum(is.na(traindata[,i]))
}
a
which(a, a$matrix.nrow...160..ncol...1. > 0)
which(a, a > 0)
which(a > 0)
a <- data.frame(matrix(nrow=160, ncol=1))
for(i in 1:160){
a[i,1] <- sum(is.na(traindata[,i]))
}
b <- which(a > 0)
traindata2 <- traindata[,-c(b)]
a <- data.frame(matrix(nrow=160, ncol=1))
for(i in 1:160){
a[i,1] <- sum(is.na(traindata[,i]))
}
b <- which(a > 0)
traindata2 <- traindata[,-c(b)]
testdata2 <- testdata[,-c(b)]
str(testdata2)
traindata2$skewness_yaw_forearm
traindata$skewness_yaw_forearm
a <- data.frame(matrix(nrow=160, ncol=1))
for(i in 1:160){
a[i,1] <- sum(is.na(traindata[,i]))
}
b <- which(a > 0)
traindata2 <- traindata[,-c(b)]
testdata2 <- testdata[,-c(b)]
c <- data.frame(matrix(nrow=93, ncol=1))
for(i in 1:93){
c[i,1] <- sum(is.na(traindata[,i]))
}
c
a <- data.frame(matrix(nrow=160, ncol=1))
for(i in 1:160){
a[i,1] <- sum(is.na(traindata[,i]))
}
b <- which(a > 0)
traindata2 <- traindata[,-c(b)]
testdata2 <- testdata[,-c(b)]
c <- data.frame(matrix(nrow=93, ncol=1))
for(i in 1:93){
c[i,1] <- sum(is.na(testdata2[,i]))
}
c
a <- data.frame(matrix(nrow=160, ncol=1))
for(i in 1:160){
a[i,1] <- sum(is.na(traindata[,i]))
}
b <- which(a > 0)
traindata2 <- traindata[,-c(b)]
testdata2 <- testdata[,-c(b)]
c <- data.frame(matrix(nrow=93, ncol=1))
for(i in 1:93){
c[i,1] <- sum(is.na(testdata2[,i]))
}
d <- which(a > 0)
traindata3 <- traindata[,-c(d)]
testdata3 <- testdata[,-c(d)]
testdata3
a <- data.frame(matrix(nrow=160, ncol=1))
for(i in 1:160){
a[i,1] <- sum(is.na(traindata[,i]))
}
b <- which(a > 0)
traindata2 <- traindata[,-c(b)]
testdata2 <- testdata[,-c(b)]
c <- data.frame(matrix(nrow=93, ncol=1))
for(i in 1:93){
c[i,1] <- sum(is.na(testdata2[,i]))
}
d <- which(c > 0)
traindata3 <- traindata[,-c(d)]
testdata3 <- testdata[,-c(d)]
a <- data.frame(matrix(nrow=160, ncol=1))
for(i in 1:160){
a[i,1] <- sum(is.na(traindata[,i]))
}
b <- which(a > 0)
traindata2 <- traindata[,-c(b)]
testdata2 <- testdata[,-c(b)]
c <- data.frame(matrix(nrow=93, ncol=1))
for(i in 1:93){
c[i,1] <- sum(is.na(testdata2[,i]))
}
d <- which(c > 0)
traindata3 <- traindata2[,-c(d)]
testdata3 <- testdata2[,-c(d)]
testdata3
head(traindata3)
str(testdata3)
str(traindata3)
m1 <- train(classe ~. , data=traindata3, method="rpart")
m1
predict(m1, testdata3)
inTrain <- createDataPartition(y=traindata3$classe, p=0.8)
tdata <- traindata[unlist(inTrain),]
vdata <- traindata[-unlist(inTrain),]
m1 <- train(classe ~. , data=na.omit(tdata), method="rpart")
inTrain <- createDataPartition(y=traindata3$classe, p=0.8)
tdata <- traindata3[unlist(inTrain),]
vdata <- traindata3[-unlist(inTrain),]
m1 <- train(classe ~. , data=na.omit(tdata), method="rpart")
m1 <- train(classe ~. , data=tdata, method="rpart")
m1$finalModel
p1 <- predict(m1, vdata)
p1
vdata$classe
tdata$classe
table(vdata$classe)
table(tdata$classe)
View(traindata3)
confusionMatrix(p1, vdata2$classe)
confusionMatrix(p1, vdata$classe)
plot(m1$finalModel, uniform=TRUE, main="Classification Tree")
setwd("C:\\Users\\Vostro 5458\\OneDrive\\Educacao\\Coursera-DataScienceSpecialization\\8-PracticalMachineLearning\\cp\\Course-Project---Practical-Machine-Learning")
library("caret")
library(randomForest)
set.seed(1)
traindata <- read_csv("pml-training.csv")
testdata <- read_csv("pml-testing.csv")
traindata <- read.csv("pml-training.csv")
testdata <- read.csv("pml-testing.csv")
xFrame <- head(traindata,1)
fixFrame <- fixFrame[, -length(colnames(fixFrame))]
testdata1<-testdata[,-58]
testdata1 <- rbind(fixFrame, testdata1)
testdata1 <- testdata1[-1,]
testdata[,58]
str(testdata[,58])
str(traindata[,58])
